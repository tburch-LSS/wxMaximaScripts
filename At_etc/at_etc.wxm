/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 20.12.1 ] */
/* [wxMaxima: title   start ]
Distributivity, Extended
   [wxMaxima: title   end   ] */


/* [wxMaxima: comment start ]
(Tommy Burch, 08.2024--02.2025)
   [wxMaxima: comment end   ] */


/* [wxMaxima: section start ]
At or Down
   [wxMaxima: section end   ] */


/* [wxMaxima: comment start ]
This all started back in the late '90s at the UofA in a physics lab prep session (with R. McCroskey and R. Haar, among others). The discussion hinged on finding an operation (i termed it 'at' with the symbol @) over which addition was distributive. The exp / log solution below i came up with followed later the same day...
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Note that, for multiplcation and addition, the distributive property can be "revealed" through exponentials and their inverse, the natural logarithms:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
add(a,b) := log(exp(a)*exp(b));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
add(a,b);
add(c*a,c*b);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
ratsimp(%);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Placing the multiplication between the exponentials in the logarithm, we arrive at the relation (addition) over which it is disributive. We can try the same with + between the exp's...
   [wxMaxima: comment end   ] */


/* [wxMaxima: subsect start ]
At_+
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
Define the @ (or "down") relation such that addition is distributive over it: a + (b @ c) = (a+b) @ (a+c)...
Or: a + down(b,c) = down(a+b,a+c). Trying the following ansatz:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
at_eq : At(a,b) = log(exp(a) + exp(b));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
down(a,b) := radcan( log(exp(a) + exp(b)) );
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Check:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
down(a+b,a+c);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
yes!

This should work with any base for the power / log's: e.g.,
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
log10(x) := log(x) / log(10);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
 radcan( log10(10^(a+b) + 10^(a+c)) );
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
logcontract(%);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
yep! (The ambiguity probably speak volumes... see, e.g., M. Burgin, arXiv:1010.3287)

Some values with base ⅇ:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
down(0,0);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
down(1,0);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
down(x,0);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
down(x,x);
down(x-log(2),x-log(2));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Associative:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
down(a,down(b,c));
down(down(a,b),c);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
diff(down(a,b),a);
diff(down(a,b),b);
diff(diff(down(a,b),b),a);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Let's have a look:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d ([down(x,x),down(x,x+3),down(x,2*x),down(x,2*x+3),down(x,3*x),down(x,3*x+3)], [x, -2, 2])$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
wxplot3d (down(x,y), [x, -5, 5], [y, -5, 5])$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Comparing x+y with down(x,y) :
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot3d ((x+y)/down(x,y), [x, -5, 5], [y, -5, 5])$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
wxplot3d ((x+y)/down(x,y), [x, -0.5, 5], [y, -0.5, 5])$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
wxplot2d ([2*x/down(x,x), 3*x/down(x,2*x),(x+1)/down(x,1),(x-1)/down(x,-1)], [x, -5, 5], [y, -20, 20])$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
At_-,*,/
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
We can also consider a "down-like" operation with a minus instead a plus:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
down_min(a,b) := radcan( log(exp(a) - exp(b)) );
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Associativity:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
down(down_min(a,b),c);
down_min(down(a,c),b);
down(down_min(a,b),down_min(c,d));
down(down_min(a,d),down_min(c,b));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Same distributive property:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
down_min(a+b,a+c);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
As we've already seen, with times, we achieve addition. With divide, one achieves subtraction:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
down_div(a,b) := radcan( log(exp(a) / exp(b)) );
down_div(a,b);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Down differentiation
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
Given down, down_min, and down_div, one is free to define a "down derivative". However, we must take care with the notion of infinitesimals: normally h-->0 in the definition of the derivative, but here we need h-->-∞ to approach the @ identity (x @ -∞ = x)...
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
Df_Dx_eq : Df_Dx = limit( down_min( f(down(x,h)) , f(x) ) - h , h, -∞);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
Df(x,h) := down_min( f(down(x,h)) , f(x) );
Df(x,h);
Df_Dx(x) := ratsimp( limit( Df(x,h) - h , h, minf) );
Df_Dx(x);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
f(x) := A*x^b + c;
Df(x,h);
Df_Dx(x) ;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
f(x) := log(A*x^b + c);
Df(x,h);
Df_Dx(x) ;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
f(x) := exp(A*x^b + c);
Df(x,h);
Df_Dx(x) ;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
f(x) := down( g(x) , p(x) );
Df(x,h);
Df_Dx(x) ;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
So the down-derivative maintains not only the extended distributivity, but also the property that the exponential function keeps its special role: D_Dx (ⅇ^x) = ⅇ^x.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
f(x) := b^(A*x+c);
Df(x,h);
Df_Dx(x) ;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
kill(f);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
Eig_Df_eq : Df_Dx(x) = f(x);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
As we can see from the previous solutions of Df_Dx, this DE is uniquely solved by f(x)=ⅇ^x.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
kill(f);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Alternative expressions for Df_Dx(x) (with x=log(z)):
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
x = log(z);
log('diff( exp(f(log(z))) ,z,1));
log(diff( exp(f(log(z))) ,z,1));
f(x) - x + log(diff(f(x),x,1));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
Down2
   [wxMaxima: section end   ] */


/* [wxMaxima: comment start ]
Heading further "down", define "three dots" (therefore), or down2, such that: a @ down2(b,c) = down2(a@b,a@c) ...
Or:  down(a,down2(b,c)) = down2(down(a,b),down(a,c)) ...
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
td_eq : Td(a,b) = log( down(exp(a),exp(b)) );
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
down2(a,b) := radcan( log( down(exp(a),exp(b)) ) );
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
down2(down(a,b),down(a,c));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
yes!
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
down2(x,x);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
diff(down2(a,b),a);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Let's take a look...
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d ([down2(x,x),down2(x,x+1),down2(x,2*x),down2(x,3*x)], [x, -2, 2])$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
wxplot3d (down2(x,y), [x, -5, 5], [y, -5, 5])$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Comparing down(x,y) with down2(x,y) :
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot3d (down(x,y)/down2(x,y), [x, -5, 5], [y, -5, 5])$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
wxplot3d (down(x,y)/down2(x,y), [x, -0.5, 5], [y, -0.5, 5])$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
wxplot2d ([down(x,x)/down2(x,x), down(x,2*x)/down2(x,2*x),down(x,1)/down2(x,1),down(x,-1)/down2(x,-1)], [x, -5, 5], [y, -20, 20])$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
Up
   [wxMaxima: section end   ] */


/* [wxMaxima: comment start ]
Let's take a look in the "up" direction for an operation which is distrubutive over multiplication. Defining "star" (or "up"):  a * (b . c) = (a * b) . (a * c) ...
Or:  up(a,b.c) = up(a,b) . up(a,c) ...
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
str_eq : Str(a,b) = exp(log(a)*log(b));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
up(a,b) := radcan( exp(log(a)*log(b)) );
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
up(a,b);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
up(a,b*c);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
up(a,b) * up(a,c);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
which is the same as the former. So, yes!
Check with "down"-like operation:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
log( up(exp(a),exp(b)) );
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
yes!

up(a,b) could also be expressed with b as the base:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
is( up(a,b) = b^log(a) );
is( up(a,b) = a^log(b) );
is( up(b,a) = a^log(b) );
is( up(a,b) = up(b,a) );
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
... although it seems maxima has trouble with that realization in the present form...?
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
up(x,x);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
diff(up(a,b),a);
diff(up(a,b),b);
diff(diff(up(a,b),a),b);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Let's take a look:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot3d (up(x,y), [x, -5, 5], [y, -5, 5])$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
The singularity at the origin comes as no surprise. And for finite, real values, x and y should remain > 0.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot3d (up(x,y), [x, 0.2, 5], [y, 0.2, 5])$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Compare with x.y :
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot3d (up(x,y)/(x*y), [x, 1, 10], [y, 1, 10])$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
And x.y with x+y :
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot3d (x*y/(x+y), [x, 0.2, 10], [y, 0.2, 10])$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Up differentiation
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
To avoid problems with alphabetical preferences...
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
up(x,h);
up(a,h);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
we'll use 'a' as the independent variable here.

Working with up_/, up_+ as times, up_- as divide, and the new "up"-identity, h-->1...
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
Uf(a,h) := f(a*h) / f(a) ;
Uf(a,h);
Uf_Ua(a) := radcan( limit( exp( log(Uf(a,h)) / log(h) ) , h, 1, plus) );
Uf_Ua(a);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
Uf_Ua(a) := ratsimp( limit( Uf(a,h)^(1 / log(h))  , h, 1, plus));
Uf_Ua(a);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
f(a) := n*a + c;
Uf(a,h);
Uf_Ua(a);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
assume(y>1);
f(a) := a^y + c;
Uf(a,h);
Uf_Ua(a);
/* [wxMaxima: input   end   ] */
/* [wxMaxima: question  start ] */
<math><st>Is </st><mi>y</mi><st> positive, negative or zero?</st></math>
/* [wxMaxima: question  end   ] */
/* [wxMaxima: answer  start ] */
negative;
/* [wxMaxima: answer  end   ] */


/* [wxMaxima: input   start ] */
f(a) := exp(b*a^y + c);
Uf(a,h);
Uf_Ua(a);
/* [wxMaxima: input   end   ] */
/* [wxMaxima: question  start ] */
<math><st>Is </st><mi>y</mi><st> an </st><mi>integer</mi><st>?</st></math>
/* [wxMaxima: question  end   ] */
/* [wxMaxima: answer  start ] */
no;
/* [wxMaxima: answer  end   ] */
/* [wxMaxima: question  start ] */
<math><st>Is </st><mi>a</mi><st> an </st><mi>integer</mi><st>?</st></math>
/* [wxMaxima: question  end   ] */
/* [wxMaxima: answer  start ] */
no;
/* [wxMaxima: answer  end   ] */


/* [wxMaxima: input   start ] */
f(a) := b^(a^y + c);
Uf(a,h);
Uf_Ua(a);
/* [wxMaxima: input   end   ] */
/* [wxMaxima: question  start ] */
<math><st>Is </st><mi>y</mi><st> an </st><mi>integer</mi><st>?</st></math>
/* [wxMaxima: question  end   ] */
/* [wxMaxima: answer  start ] */
no;
/* [wxMaxima: answer  end   ] */
/* [wxMaxima: question  start ] */
<math><st>Is </st><mi>y</mi><mi>-</mi><mn>1</mn><st> positive, negative or zero?</st></math>
/* [wxMaxima: question  end   ] */
/* [wxMaxima: answer  start ] */
positive;
/* [wxMaxima: answer  end   ] */


/* [wxMaxima: input   start ] */
f(a) := exp(b^(a^y + c));
Uf(a,h);
Uf_Ua(a);
/* [wxMaxima: input   end   ] */
/* [wxMaxima: question  start ] */
<math><st>Is </st><mi>c</mi><st> an </st><mi>integer</mi><st>?</st></math>
/* [wxMaxima: question  end   ] */
/* [wxMaxima: answer  start ] */
no;
/* [wxMaxima: answer  end   ] */


/* [wxMaxima: input   start ] */
f(a) := g(a) * p(a);
Uf(a,h);
Uf_Ua(a);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
So the up-derivative maintains not only the extended distributivity, but also the property that the exponential function keeps its special role: U_Ua (ⅇ^a) = ⅇ^a.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
f(a) := b^exp(a^y + c);
Uf(a,h);
Uf_Ua(a);
/* [wxMaxima: input   end   ] */
/* [wxMaxima: question  start ] */
<math><st>Is </st><mi>c</mi><st> an </st><mi>integer</mi><st>?</st></math>
/* [wxMaxima: question  end   ] */
/* [wxMaxima: answer  start ] */
no;
/* [wxMaxima: answer  end   ] */
/* [wxMaxima: question  start ] */
<math><st>Is </st><mi>n</mi><st> an </st><mi>integer</mi><st>?</st></math>
/* [wxMaxima: question  end   ] */
/* [wxMaxima: answer  start ] */
no;
/* [wxMaxima: answer  end   ] */
/* [wxMaxima: question  start ] */
<math><st>Is </st><mi>a</mi><st> an </st><mi>integer</mi><st>?</st></math>
/* [wxMaxima: question  end   ] */
/* [wxMaxima: answer  start ] */
no;
/* [wxMaxima: answer  end   ] */


/* [wxMaxima: input   start ] */
kill(f);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Alternative expressions for Uf_Ua(a) (with a=exp(z)):
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
a = exp(z);
exp('diff( log(f(exp(z))) ,z,1));
exp(diff( log(f(exp(z))) ,z,1));
exp( a * diff(f(a),a,1) / f(a) );
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
Up2
   [wxMaxima: section end   ] */


/* [wxMaxima: comment start ]
Now to be distributive over "up": up2( a , up(b,c) ) = up( up2(a,b) , up2(a,c) ) ...
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
up2(a,b) := radcan( exp( up(log(a),log(b)) ) );
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
up2(a,up(b,c));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
diff(up2(a,b),a);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
up2(x,x);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Taking a look...
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot3d (up2(x,y), [x, -5, 5], [y, -5, 5])$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Problems now at x or y = 1.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot3d (up2(x,y), [x, 1.5, 5], [y, 1.5, 5])$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Comparing up2(x,y) with up(x,y) :
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot3d (up2(x,y)/up(x,y), [x, 1.5, 5], [y, 1.5, 5])$
/* [wxMaxima: input   end   ] */



/* Old versions of Maxima abort on loading files that end in a comment. */
"Created with wxMaxima 20.12.1"$
